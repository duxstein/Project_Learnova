generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  enrollments   Enrollment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(STUDENT)
  points        Int       @default(0)
  level         Int       @default(1)
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  duration    String
  level       CourseLevel
  thumbnail   String
  category    CourseCategory
  instructorId String
  instructor  Instructor @relation(fields: [instructorId], references: [id])
  modules     Module[]
  enrollments Enrollment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Instructor {
  id        String    @id @default(cuid())
  name      String
  avatar    String
  bio       String?
  expertise String[]
  courses   Course[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Module {
  id        String    @id @default(cuid())
  title     String
  duration  String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id])
  lessons   Lesson[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Lesson {
  id        String    @id @default(cuid())
  title     String
  duration  String
  content   String?
  videoUrl  String?
  order     Int
  moduleId  String
  module    Module    @relation(fields: [moduleId], references: [id])
  resources Resource[]
  progress  LessonProgress[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Resource {
  id        String    @id @default(cuid())
  title     String
  type      ResourceType
  url       String
  lessonId  String
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Enrollment {
  id        String    @id @default(cuid())
  userId    String
  courseId  String
  progress  Float     @default(0)
  user      User      @relation(fields: [userId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, courseId])
}

model LessonProgress {
  id        String    @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, lessonId])
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseCategory {
  WEB_DEVELOPMENT
  FRONTEND
  BACKEND
  MOBILE
  DEVOPS
  DATA_SCIENCE
  MACHINE_LEARNING
  CLOUD_COMPUTING
}

enum ResourceType {
  PDF
  VIDEO
  LINK
  CODE
} 